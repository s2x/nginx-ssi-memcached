# /etc/nginx/conf.d/example.com.conf
upstream golang_server {
    server 127.0.0.1:3333;
}

    limit_req_zone $binary_remote_addr zone=subrequest:10m rate=100r/s;

server {
    server_name _;
    root /var/www/public;
    ssi on;
    error_page 500 404 /_ssi_error.html;
    set $custm_err off;

    location ^~ /golang/ {
        limit_req zone=subrequest burst=10;
        proxy_pass http://golang_server;
    }

    location = /_ssi_error.html {
        root /var/www/public;
        internal;
    }

    location / {
        # SSI We need this because the $uri is renamed later when making the internal request towards "index.php", so we would loose the original request !
        set $saved_uri $uri;
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    location ^~ /cached/ {
        set_by_lua_block $memcached_key {
            return ngx.encode_base64(ngx.var.uri .. ngx.var.is_args .. ngx.var.args)
        }
        memcached_pass 127.0.0.1:11211;
        proxy_intercept_errors on;
        default_type text/html;
        error_page 404 502 = @apiFallback;
    }

    location ^~ /api/ {
        try_files $uri $uri/ @apiFallback;
    }

    location @apiFallback {
        set_by_lua_block $memcached_key {
            return ngx.encode_base64(ngx.var.uri .. ngx.var.is_args .. ngx.var.args)
        }
        fastcgi_pass unix:/var/run/php-fpm.sock;
        include fastcgi_params;
        fastcgi_intercept_errors on;
        fastcgi_param SCRIPT_FILENAME $realpath_root/index.php;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        fastcgi_param REQUEST_URI $uri;
        fastcgi_param HTTP_X_MEMCACHED_KEY $memcached_key;
    }

    # optionally disable falling back to PHP script for the asset directories;
    # nginx will return a 404 error when files are not found instead of passing the
    # request to Symfony (improves performance but Symfony's 404 page is not displayed)
    # location /bundles {
    #     try_files $uri =404;
    # }

    location ~ ^/index\.php(/|$) {
        # when using PHP-FPM as a unix socket
        fastcgi_pass unix:/var/run/php-fpm.sock;

        # when PHP-FPM is configured to use TCP
        #fastcgi_pass 127.0.0.1:9000;

        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        # SSI Nginx doesn't pass this http header to Symfony even if ssi is on, but Symfony needs it to know if the proxy is able to use ssi
        fastcgi_param HTTP_SURROGATE_CAPABILITY "device=\"SSI/1.0\"";
        # SSI The included default "fastcgi_params" uses $request_uri, so internal requests are skiped ! This causes an infinte loop because of ssi inclusion.
        fastcgi_param REQUEST_URI $saved_uri;
        # SSI For some reason, we need to pass it again even if the included default "fastcgi_params" slloks correct
        fastcgi_param QUERY_STRING $args;

        # optionally set the value of the environment variables used in the application
        # fastcgi_param APP_ENV prod;
        # fastcgi_param APP_SECRET <app-secret-id>;
        # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        # Caveat: When PHP-FPM is hosted on a different machine from nginx
        #         $realpath_root may not resolve as you expect! In this case try using
        #         $document_root instead.
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        # Prevents URIs that include the front controller. This will 404:
        # http://example.com/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    error_log /dev/stderr;
    access_log /dev/stdout;
}
